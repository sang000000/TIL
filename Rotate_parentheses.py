def solution(s):
    answer = 0
    double_s = s * 2

    for i in range(1, len(double_s) - len(s) + 1):
        stack = []
        for j in double_s[i : i + len(s)]:
            if j in "([{":
                stack.append(j)
            elif len(stack) >= 1 and (
                stack[-1] == "("
                and j == ")"
                or stack[-1] == "["
                and j == "]"
                or stack[-1] == "{"
                and j == "}"
            ):
                stack.pop()
            elif len(stack) == 0 and (j == ")" or j == "]" or j == "}"):
                stack.append("fail")
                break
        if len(stack) == 0:
            answer += 1

    return answer


# 1) 문제 설명

"""다음 규칙을 지키는 문자열을 올바른 괄호 문자열이라고 정의한다.대괄호, 중괄호, 그리고 소괄호로 이루어진 문자열 s가 매개변수로 주어진다.
(), [], {} 는 모두 올바른 괄호 문자열이다.
만약 A가 올바른 괄호 문자열이라면, (A), [A], {A} 도 올바른 괄호 문자열이다. 예를 들어, [] 가 올바른 괄호 문자열이므로, ([]) 도 올바른 괄호 문자열이다.
만약 A, B가 올바른 괄호 문자열이라면, AB 도 올바른 괄호 문자열이다. 예를 들어, {} 와 ([]) 가 올바른 괄호 문자열이므로, {}([]) 도 올바른 괄호 문자열이다.
이 s를 왼쪽으로 x (0 ≤ x < (s의 길이)) 칸만큼 회전시켰을 때 s가 올바른 괄호 문자열이 되게 하는 x의 개수를 반환하도록 solution 함수를 완성해라."""

# 2) 제한 사항

"""s의 길이는 1 이상 1,000 이하이다."""


# 3) 입출력 예시

"""입출력 예 #1

다음 표는 "[](){}" 를 회전시킨 모습을 나타낸 것이다.
x                                                        s를 왼쪽으로 x칸만큼 회전                                               올바른 괄호 문자열?

0	"[](){}"	O
1	"](){}["	X
2	"(){}[]"	O
3	"){}[]("	X
4	"{}[]()"	O
5	"}[](){"	X
올바른 괄호 문자열이 되는 x가 3개이므로, 3을 반환해야 한다.
입출력 예 #2

다음 표는 "}]()[{" 를 회전시킨 모습을 나타낸 것이다.
x                                                      s를 왼쪽으로 x칸만큼 회전                                        올바른 괄호 문자열?
0	"}]()[{"	X
1	"]()[{}"	X
2	"()[{}]"	O
3	")[{}]("	X
4	"[{}]()"	O
5	"{}]()["	X
올바른 괄호 문자열이 되는 x가 2개이므로, 2를 반환해야 한다.
입출력 예 #3



 s가 "[)(]"이면, s를 어떻게 회전하더라도 올바른 괄호 문자열을 만들 수 없으므로, 0을 반환해야 한다.
입출력 예 #4



 s가 "}}}"이면, s를 어떻게 회전하더라도 올바른 괄호 문자열을 만들 수 없으므로, 0을 반환해야 한다."""

# 4) 코드 설명

"""solution 함수에서 s의 값을 입력 받는다.
올바른 괄호 문자열의 경우를 세기 위해 answer은 초기 값 0으로 설정한다.
모든 경우의 수를 비교하기 위해 double_s에 문자열 s를 2배로 해서 저장한다.
for문을 사용하여 i에 1부터 double_s의 길이 빼기 s의 길이한 값까지 1씩 증가시켜서 i에 할당한다.
반복문 안에서는 먼저 stack이라는 빈 리스트를 생성하고 반복문을 하나 더 실행한다.
반복문 안에 있는 반복문은 j에 double_s 문자열에 i부터 s의 길이 더하기 i 한 값 바로 전까지만 가져와 하나씩 문자를 집어 넣는다. 이렇게 해서 s를 x칸만큼 회전했을 때를 확인한다.
반복문 안에 있는 반복문 안에서는 만약 j가 "([{" 문자열에 있다면 j를 stack에 추가한다.
만약 stack에 길이가 1이상이라면, 즉 stack 리스트 안에 (, [. { 중 하나라도 있고 stack 리스트의 마지막 값이 "("이고 j가 ")" 이거나 또는 stack 리스트의 마지막 값이 "["이고 j값이 "]" 이거나 또는 stack 리스트의 마지막 값이 "{"이고 j값이 "}"이면 stack 리스트의 마지막 값을 제거한다.
위에 조건문에 해당 사항이 없고 만약 stack이 비어있는데 j의 값이 ")" 혹은 "]" 혹은 "}"이면 되는 경우가 없으므로 stack에 fail을 추가하고 반복문을 종료한다.
반복문 안에 반복문이 끝나면 만약 stack이 비어있다면 x칸 움직였을 때 문제가 없었단 뜻이므로 answer에 값을 1 추가한다.
문제가 있었다면 반복문 안에 반복문 과정을 통해 stack에 예를 들면 ")" 이런 게 남아 있어 answer에 값을 추가하지 않는다.
모든 반복문이 끝나면 answer의 값을 반환한다."""

# 문제 출처 : 프로그래머스
