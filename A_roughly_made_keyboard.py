def solution(keymap, targets):
    answer = []
    for target in targets:
        count = 0

        for char in target:
            a = 0
            found = False

            for k in range(len(keymap)):
                if char in keymap[k]:
                    found = True
                    press_count = keymap[k].index(char) + 1
                    if a == 0 or press_count < a:
                        a = press_count

            if found:
                count += a
            else:
                count = -1
                break

        answer.append(count)

    return answer


# 1) 문제 설명

"""휴대폰의 자판은 컴퓨터 키보드 자판과는 다르게 하나의 키에 여러 개의 문자가 할당될 수 있다. 키 하나에 여러 문자가 할당된 경우, 동일한 키를 연속해서 빠르게 누르면 할당된 순서대로 문자가 바뀐다.
예를 들어, 1번 키에 "A", "B", "C" 순서대로 문자가 할당되어 있다면 1번 키를 한 번 누르면 "A", 두 번 누르면 "B", 세 번 누르면 "C"가 되는 식이다.
같은 규칙을 적용해 아무렇게나 만든 휴대폰 자판이 있다. 이 휴대폰 자판은 키의 개수가 1개부터 최대 100개까지 있을 수 있으며, 특정 키를 눌렀을 때 입력되는 문자들도 무작위로 배열되어 있다. 또, 같은 문자가 자판 전체에 여러 번 할당된 경우도 있고, 키 하나에 같은 문자가 여러 번 할당된 경우도 있다. 심지어 아예 할당되지 않은 경우도 있다. 따라서 몇몇 문자열은 작성할 수 없을 수도 있다.
이 휴대폰 자판을 이용해 특정 문자열을 작성할 때, 키를 최소 몇 번 눌러야 그 문자열을 작성할 수 있는지 알아보고자 한다.
1번 키부터 차례대로 할당된 문자들이 순서대로 담긴 문자열배열 keymap과 입력하려는 문자열들이 담긴 문자열 배열 targets가 주어질 때, 각 문자열을 작성하기 위해 키를 최소 몇 번씩 눌러야 하는지 순서대로 배열에 담아 return 하는 solution 함수를 완성해라. 단, 목표 문자열을 작성할 수 없을 때는 -1을 저장한다.
"""
# 2) 제한 사항

"""1 ≤ keymap의 길이 ≤ 100
1 ≤ keymap의 원소의 길이 ≤ 100
keymap[i]는 i + 1번 키를 눌렀을 때 순서대로 바뀌는 문자를 의미한다.
예를 들어 keymap[0] = "ABACD" 인 경우 1번 키를 한 번 누르면 A, 두 번 누르면 B, 세 번 누르면 A 가 된다.
keymap의 원소의 길이는 서로 다를 수 있다.
keymap의 원소는 알파벳 대문자로만 이루어져 있다.
1 ≤ targets의 길이 ≤ 100
1 ≤ targets의 원소의 길이 ≤ 100
targets의 원소는 알파벳 대문자로만 이루어져 있다."""

# 3) 입출력 예시

"""입출력 예 #1

keymap이 ["ABACD", "BCEFD"]이고 targets이 ["ABCD","AABB"]이면 "ABCD"의 경우, 1번 키 한 번 → A, 2번 키 한 번 → B, 2번 키 두 번 → C, 1번 키 다섯 번 → D 따라서 총합인 9를 첫 번째 인덱스에 저장한다."AABB"의 경우,1번 키 한 번 → A, 1번 키 한 번 → A, 2번 키 한 번 → B, 2번 키 한 번 → B 따라서 총합인 4를 두 번째 인덱스에 저장한다.결과적으로 [9,4]를 반환한다.


입출력 예 #2

keymap이 ["AA"]이고 targets이 ["B"]이면 "B"의 경우, 'B'가 어디에도 존재하지 않기 때문에 -1을 첫 번째 인덱스에 저장한다.결과적으로 [-1]을 반환한다."""

# 4) 코드 설명
"""solution 함수에서 keymap, targets의 값을 입력 받는다.
값을 저장하기 위해 answer이라는 빈 리스트를 만든다.
반복문을 통해 targets의 값을 target에 하나씩 넣는다,
개수를 세기 위해 count는 0으로 설정해준다.
반복문을 통해 저장된 target 값을 하나씩 chart에 집어 넣는다.
현재 문자를 입력하기 위해 필요한 최소 누른 횟수를 0으로 설정한다.
현재 문자가 키맵에 존재하는지 여부를 확인하기 위해 found에 False로 설정한다.
반복문을 통해 keymap의 길이 빼기 1 만큼 k에 집어넣는다
해당 k를 이용하여 만약 char가 keymap[k]에 있다면, 즉 현재 문자가 keymap의 k번째의 있다면, 문자를 찾았으므로 found를 True로 설정하주고 press_count에 index 함수를 활용해 그 문자의 위치를 찾아 1을 더한 값을 저장한다.
만약 a 값이 0이거나 press_count 값이 a보다 작으면 더 적은 횟수로 그 문자를 입력할 수 있으므로 a 값으을 press_count로 바꾼다.
k 반복문이 끝나면 만약 found가 True면 해당 문자를 입력할 수 있다는 뜻이므로 count에 a값을 더해준다.
그렇지 않다면 해당 문자를 입력 할수 없다는 뜻이므로 count는 -1을 해주고 종료한다.
char 반복문이 끝나면 answer에 count 값을 더해준다.
계속 반복해서 반복문이 모두 끝나면 answer 값을 반환한다."""

# 문제 출처 : 프로그래머스
