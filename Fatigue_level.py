from itertools import permutations

def solution(k, dungeons):
    max_count = 0
    
    # 모든 던전의 순열을 생성
    for order in permutations(dungeons):
        remaining_fatigue = k
        count = 0
        
        for min_fatigue, consume_fatigue in order:
            if remaining_fatigue >= min_fatigue:  # 탐험 가능
                remaining_fatigue -= consume_fatigue  # 피로도 소모
                count += 1  # 탐험한 던전 수 증가
            else:
                break  # 더 이상 탐험할 수 없음
        
        max_count = max(max_count, count)  # 최대 던전 수 갱신

    return max_count





#1) 문제 설명

'''XX게임에는 피로도 시스템(0 이상의 정수로 표현한다)이 있으며, 일정 피로도를 사용해서 던전을 탐험할 수 있다. 이때, 각 던전마다 탐험을 시작하기 위해 필요한 "최소 필요 피로도"와 던전 탐험을 마쳤을 때 소모되는 "소모 피로도"가 있다. "최소 필요 피로도"는 해당 던전을 탐험하기 위해 가지고 있어야 하는 최소한의 피로도를 나타내며, "소모 피로도"는 던전을 탐험한 후 소모되는 피로도를 나타낸다. 예를 들어 "최소 필요 피로도"가 80, "소모 피로도"가 20인 던전을 탐험하기 위해서는 유저의 현재 남은 피로도는 80 이상 이어야 하며, 던전을 탐험한 후에는 피로도 20이 소모된다.
이 게임에는 하루에 한 번씩 탐험할 수 있는 던전이 여러개 있는데, 한 유저가 오늘 이 던전들을 최대한 많이 탐험하려 한다. 유저의 현재 피로도 k와 각 던전별 "최소 필요 피로도", "소모 피로도"가 담긴 2차원 배열 dungeons 가 매개변수로 주어질 때, 유저가 탐험할수 있는 최대 던전 수를 반환하도록 solution 함수를 완성해라.
'''
#2) 제한 사항

'''k는 1 이상 5,000 이하인 자연수이다.
dungeons의 세로(행) 길이(즉, 던전의 개수)는 1 이상 8 이하이다.
dungeons의 가로(열) 길이는 2 이다.
dungeons의 각 행은 각 던전의 ["최소 필요 피로도", "소모 피로도"] 이다.
"최소 필요 피로도"는 항상 "소모 피로도"보다 크거나 같다.
"최소 필요 피로도"와 "소모 피로도"는 1 이상 1,000 이하인 자연수이다.
서로 다른 던전의 ["최소 필요 피로도", "소모 피로도"]가 서로 같을 수 있다.'''

#3) 입출력 예시 



'''입출력 예 #1



k가 8이고 dungeons가 [[80,20],[50,40],[30,10]]이면, 현재 피로도는 80이다.

만약, 첫 번째 → 두 번째 → 세 번째 던전 순서로 탐험한다면

현재 피로도는 80이며, 첫 번째 던전을 돌기위해 필요한 "최소 필요 피로도" 또한 80이므로, 첫 번째 던전을 탐험할 수 있습니다. 첫 번째 던전의 "소모 피로도"는 20이므로, 던전을 탐험한 후 남은 피로도는 60이다.
남은 피로도는 60이며, 두 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 50이므로, 두 번째 던전을 탐험할 수 있다. 두 번째 던전의 "소모 피로도"는 40이므로, 던전을 탐험한 후 남은 피로도는 20이다.
남은 피로도는 20이며, 세 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 30이다. 따라서 세 번째 던전은 탐험할 수 없다.
만약, 첫 번째 → 세 번째 → 두 번째 던전 순서로 탐험한다면

현재 피로도는 80이며, 첫 번째 던전을 돌기위해 필요한 "최소 필요 피로도" 또한 80이므로, 첫 번째 던전을 탐험할 수 있다. 첫 번째 던전의 "소모 피로도"는 20이므로, 던전을 탐험한 후 남은 피로도는 60이다.
남은 피로도는 60이며, 세 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 30이므로, 세 번째 던전을 탐험할 수 있다. 세 번째 던전의 "소모 피로도"는 10이므로, 던전을 탐험한 후 남은 피로도는 50이다.
남은 피로도는 50이며, 두 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 50이므로, 두 번째 던전을 탐험할 수 있다. 두 번째 던전의 "소모 피로도"는 40이므로, 던전을 탐험한 후 남은 피로도는 10이다.
따라서 이 경우 세 던전을 모두 탐험할 수 있으며, 유저가 탐험할 수 있는 최대 던전 수는 3이다'''

#4) 코드 설명

'''모든 가능한 순열을 찾기 위해 itertools 모듈에 포함된 permutations 함수를 불러온다.
solution 함수에서 k, dungeons의 값을 입력 받는다.
최대한 많이 탐험 할 수 있는 경우의 수를 찾기 위해 max_count는 초기 값을 0으로 설정한다.
반복문을 통해 dungeons의 리스트의 모든 순열을 생성하여 order에 하나씩 넣어준다.
반복문 안에서는 remaing_fatigue를 k 값으로 하여 초기 값을 정한다.
던전을 몇개 탐험했는지 세기 위해 count의 초기 값을 0으로 설정한다.
반복문 안에서 반복문을 한번 더 실행하여 해당 순열의 요소 값을 하나씩 가져와서 min_fatigue에는 최소 피로도 값을 넣고 consume에는 피로도 소모 값을 넣는다.
반복문 안에 있는 반복문의 안에서는 만약 remaing_fatigue의 값이 min_fatigue보다 크거나 같다면, 즉 현재 피로도 값이 최소 피로도 값보다 크거나 같다면 탐험이 가능하다는 뜻이므로 그 던전을 탐험 했다는 뜻으로 count의 값을 1 증가 시킨다.
그렇지 않다면 더 이상 탐험 할 수 없다는 뜻이므로 break를 사용하여 반복문 안에 있는 반복문을 빠져 나간다.
반복문 안에 있는 반복문이 끝나면 max_count의 값을 max 함수를 이용하여 max_count와 count 값과 비교하여 더 큰 값으로 갱신한다.
모든 반복문이 끝나면 max_count의 값을 반환하여 탐험할 수 있는 최대 던전 값을 구한다.'''

#문제 출처 : 프로그래머스

