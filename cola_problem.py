def solution(a, b, n):
    answer = 0
    while n >= a:
        answer += (n // a) * b 
        n = (n // a) * b + n % a        
    return answer



#1) 문제 설명

'''오래전 유행했던 콜라 문제가 있다. 콜라 문제의 지문은 다음과 같다.문제를 풀던 상빈이는 콜라 문제의 완벽한 해답을 찾았다. 상빈이가 푼 방법은 아래 그림과 같다. 우선 콜라 빈 병 20병을 가져가서 10병을 받는다. 받은 10병을 모두 마신 뒤, 가져가서 5병을 받는다. 5병 중 4병을 모두 마신 뒤 가져가서 2병을 받고, 또 2병을 모두 마신 뒤 가져가서 1병을 받는다. 받은 1병과 5병을 받았을 때 남은 1병을 모두 마신 뒤 가져가면 1병을 또 받을 수 있다. 이 경우 상빈이는 총 10 + 5 + 2 + 1 + 1 = 19병의 콜라를 받을 수 있다.문제를 열심히 풀던 상빈이는 일반화된 콜라 문제를 생각했다. 이 문제는 빈 병 a개를 가져다주면 콜라 b병을 주는 마트가 있을 때, 빈 병 n개를 가져다주면 몇 병을 받을 수 있는지 계산하는 문제이다. 기존 콜라 문제와 마찬가지로, 보유 중인 빈 병이 a개 미만이면, 추가적으로 빈 병을 받을 순 없다. 상빈이는 열심히 고심했지만, 일반화된 콜라 문제의 답을 찾을 수 없었다. 상빈이를 도와, 일반화된 콜라 문제를 해결하는 프로그램을 만들어라.
콜라를 받기 위해 마트에 주어야 하는 병 수 a, 빈 병 a개를 가져다 주면 마트가 주는 콜라 병 수 b, 상빈이가 가지고 있는 빈 병의 개수 n이 매개변수로 주어진다. 상빈이가 받을 수 있는 콜라의 병 수를 return 하도록 solution 함수를 작성해라
정답은 아무에게도 말하지 말아라.

콜라 빈 병 2개를 가져다주면 콜라 1병을 주는 마트가 있다. 빈 병 20개를 가져다주면 몇 병을 받을 수 있는가?

단, 보유 중인 빈 병이 2개 미만이면, 콜라를 받을 수 없다.'''

#2) 제한 사항

'''1 ≤ b < a ≤ n ≤ 1,000,000
정답은 항상 int 범위를 넘지 않게 주어진다.'''

#3) 입출력 예시

'''입출력 예 #1

a가 3이고 b가 1이고 n이 20이면
빈 병 20개 중 18개를 마트에 가져가서, 6병의 콜라를 받는다.
이때 상빈이가 가지고 있는 콜라 병의 수는 8(20 – 18 + 6 = 8)개이다.
빈 병 8개 중 6개를 마트에 가져가서, 2병의 콜라를 받는다.
이때 상빈이가 가지고 있는 콜라 병의 수는 4(8 – 6 + 2 = 4)개이다.
빈 병 4 개중 3개를 마트에 가져가서, 1병의 콜라를 받는다.
이때 상빈이가 가지고 있는 콜라 병의 수는 2(4 – 3 + 1 = 2)개이다.
3번의 교환 동안 상빈이는 9(6 + 2 + 1 = 9)병의 콜라를 받았다.'''

#4) 코드 설명

'''solution 함수에서 a와 b와 n의 값을 입력 받는다.
개수를 세기 위해 answer은 초기 값을 0으로 준다.
가지고 있는 빈 병의 수가 교환에 필요한 빈 병의 수보다 크거나 같아야만 콜라를 받을 수 있으므로 n의 값이 a보다 크거나 같을 동안만 반복문을 돌린다.
반복문 안에서는 answer에 n의 값을 a로 나눈 몫을 b랑 곱하여 저장한다. 즉 가지고 있는 빈병의 수를 교환에 필요한 빈병의 개수로 나누고 그 값을 교환 받을 때마다 받는 콜라의 수와 곱한다.
그 후 n의 값은 n의 값을 a로 나눈 몫을 b랑 곱하고 n을 a로 나누었을 때 나머지와 더한다. 즉 가지고 있는 빈병으로 교환을 받은 병의 개수와 교환 받고 남은 나머지 빈 병의 개수를 더해 현재 가지고 있는 빈병의 개수를 구한다.
n이 a보다 작아지면, 즉 가지고 있는 빈 병이 교환에 필요한 빈 병의 수보다 작아지면 반복문을 종료한다.
그 후 answer을 반환한다.'''

#문제 출처 : 프로그래머스