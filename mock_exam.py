def solution(answers):
    answer = []
    count = [0 for i in range(3)]
    
    o = [1,2,3,4,5]
    tw = [2,1,2,3,2,4,2,5]
    thr = [3,3,1,1,2,2,4,4,5,5]
    
    for i in range(len(answers)):
        if(o[i%len(o)] == answers[i]):
            count[0] += 1
        if(tw[i%len(tw)] == answers[i]):
            count[1] += 1
        if(thr[i%len(thr)] == answers[i]):
            count[2] += 1     
    
    for i in range(len(count)):
        if(count[i] == max(count)):
            answer.append(i+1)
    return sorted(answer)


#1) 문제 설명

'''수포자는 수학을 포기한 사람의 준말이다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 한다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍는다.1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해라.
1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...'''

#2) 제한 사항

'''시험은 최대 10,000 문제로 구성되어있다.
문제의 정답은 1, 2, 3, 4, 5중 하나이다.
가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해라.'''

#3) 입출력 예시

'''입출력 예 #1

answers가 [1,2,3,4,5]이면, 수포자 1은 모든 문제를 맞혔고 수포자 2는 모든 문제를 틀렸고 수포자 3은 모든 문제를 틀렸다. 따라서 가장 문제를 많이 맞힌 사람은 수포자 1이다. 그러니 [1]을 반환한다.


입출력 예 #2

answers가 [1,3,2,4,2]이면, 수포자 1은 모든 문제를 맞혔고 모든 사람이 2문제씩 맞췄으므로 [1,2,3]을 반환한다.'''


#4) 코드 설명

'''solution 함수에서 answers의 값을 입력 받는다.
값을 반환하기 위해 answer이라는 빈 리스트를 만든다.
각각 몇 문제를 맞췄는지 알기 위해 count라는 0으로 이루어진 리스트를 만든다.
o에는 첫 번째 수포자가 찍는 방식을 리스트로 만든다.
tw에는 두 번째 수포자가 찍는 방식을 리스트로 만든다.
thr에는 세 번째 수포자가 찍는 방식을 리스트로 만든다.
반복문을 통해 answers의 길이 뺴기 1만큼 i에 하나씩 증가하며 집어넣어 만약 리스트 o의 첫번째부터 마지막까지 요소를 순서대로 반복하면서 answers의 i번째 위치와 같은지 비교하여 같다면 count 리스트의 첫 번째 요소에 값을 1 증가시킨다.
나머지 tw와 thr도 같은 방식으로 실행한다.
i값을 해당 리스트의 길이로 나눈 나머지 값을 이용해 i값이 o,th,thr 리스트의 인덱스 범위를 벗어나는 숫자여도 계속 반복적으로 처음부터 끝까지 위치와 비교하여 문제가 발생하지 않는다.
반복문이 종료되면 다음 반복문을 실행되어 i 값을 count의 길이 빼기 1까지 1씩 증가하며 집어넣어 만약 count리스트의 i번째 값이 count리스트의 최대값과 같다면 answer 리스트에 해당 i값 더하기 1을 해준다.
그후 정렬하여 반환한다.'''

#문제 출처 : 프로그래머스