def solution(fees, records):
    import math
    answer_dict = {}
    total_time_dict = {}

    # 기록을 처리하여 차량 번호별 입출차 시간 관리
    for record in records:
        time, car_number, status = record.split(" ")
        hour, minute = map(int, time.split(":"))
        minutes = hour * 60 + minute

        if car_number not in total_time_dict:
            total_time_dict[car_number] = 0

        if status == "IN":
            if car_number not in answer_dict:
                answer_dict[car_number] = minutes
            else:
                answer_dict[car_number] = minutes
        else:  # OUT
            total_time_dict[car_number] += minutes - answer_dict[car_number]
            answer_dict[car_number] = -1  # OUT 처리 완료

    # 마지막에 처리되지 않은 IN 기록 처리
    for car_number, in_time in answer_dict.items():
        if in_time != -1:  # 아직 OUT되지 않은 차량
            total_time_dict[car_number] += (23 * 60 + 59) - in_time

    # 주차 요금 계산
    result = []
    for car_number in sorted(total_time_dict.keys()):
        total_time = total_time_dict[car_number]
        if total_time <= fees[0]:
            parking_fee = fees[1]
        else:
            parking_fee = fees[1] + math.ceil((total_time - fees[0]) / fees[2]) * fees[3]
        result.append(parking_fee)

    return result



#1) 문제 설명

'''주차장의 요금표와 차량이 들어오고(입차) 나간(출차) 기록이 주어졌을 때, 차량별로 주차 요금을 계산하려고 한다. 아래는 하나의 예시를 나타낸다.
요금표
     기본 시간(분)                              기본 요금(원)                                     단위 시간(분)                단위 요금(원)

        180	                                        5000	                                        10	                        600


입/출차 기록
시각(시:분)                                                               차량 번호                                                   내역

05:34	                                                                    5961	                                                입차
06:00	                                                                    0000	                                                입차
06:34	                                                                    0000	                                                출차
07:59	                                                                    5961	                                                출차
07:59	                                                                    0148	                                                입차
18:59	                                                                    0000	                                                입차
19:09	                                                                    0148	                                                출차
22:59	                                                                    5961	                                                입차
23:00	                                                                    5961	                                                출차


자동차별 주차 요금
차량 번호                    누적 주차 시간(분)                             주차 요금(원)

0000	                    34 + 300 = 334	                            5000 + ⌈(334 - 180) / 10⌉ x 600 = 14600
0148	                    670	                                        5000 +⌈(670 - 180) / 10⌉x 600 = 34400
5961	                    145 + 1 = 146	                            5000
어떤 차량이 입차된 후에 출차된 내역이 없다면, 23:59에 출차된 것으로 간주한다.
0000번 차량은 18:59에 입차된 이후, 출차된 내역이 없다. 따라서, 23:59에 출차된 것으로 간주한다.
00:00부터 23:59까지의 입/출차 내역을 바탕으로 차량별 누적 주차 시간을 계산하여 요금을 일괄로 정산한다.
누적 주차 시간이 기본 시간이하라면, 기본 요금을 청구한다.
누적 주차 시간이 기본 시간을 초과하면, 기본 요금에 더해서, 초과한 시간에 대해서 단위 시간 마다 단위 요금을 청구한다.
초과한 시간이 단위 시간으로 나누어 떨어지지 않으면, 올림한다.
⌈a⌉ : a보다 작지 않은 최소의 정수를 의미한다. 즉, 올림을 의미한다.
주차 요금을 나타내는 정수 배열 fees, 자동차의 입/출차 내역을 나타내는 문자열 배열 records가 매개변수로 주어진다. 차량 번호가 작은 자동차부터 청구할 주차 요금을 차례대로 정수 배열에 담아서 반환하도록 solution 함수를 완성해라.
'''
#2) 제한 사항

'''fees의 길이 = 4
fees[0] = 기본 시간(분)
1 ≤ fees[0] ≤ 1,439
fees[1] = 기본 요금(원)
0 ≤ fees[1] ≤ 100,000
fees[2] = 단위 시간(분)
1 ≤ fees[2] ≤ 1,439
fees[3] = 단위 요금(원)
1 ≤ fees[3] ≤ 10,000
1 ≤ records의 길이 ≤ 1,000
records의 각 원소는 "시각 차량번호 내역" 형식의 문자열이다.
시각, 차량번호, 내역은 하나의 공백으로 구분되어 있다.
시각은 차량이 입차되거나 출차된 시각을 나타내며, HH:MM 형식의 길이 5인 문자열이다.
HH:MM은 00:00부터 23:59까지 주어진다.
잘못된 시각("25:22", "09:65" 등)은 입력으로 주어지지 않는다.
차량번호는 자동차를 구분하기 위한, `0'~'9'로 구성된 길이 4인 문자열이다.
내역은 길이 2 또는 3인 문자열로, IN 또는 OUT입니다. IN은 입차를, OUT은 출차를 의미한다.
records의 원소들은 시각을 기준으로 오름차순으로 정렬되어 주어진다.
records는 하루 동안의 입/출차된 기록만 담고 있으며, 입차된 차량이 다음날 출차되는 경우는 입력으로 주어지지 않는다.
같은 시각에, 같은 차량번호의 내역이 2번 이상 나타내지 않는다.
마지막 시각(23:59)에 입차되는 경우는 입력으로 주어지지 않는다.
아래의 예를 포함하여, 잘못된 입력은 주어지지 않는다.
주차장에 없는 차량이 출차되는 경우
주차장에 이미 있는 차량(차량번호가 같은 차량)이 다시 입차되는 경우'''

#3) 입출력 예시 

'''입출력 예 #1



feesrk [120, 0, 60, 591]이고 records가 ["16:00 3961 IN","16:00 0202 IN","18:00 3961 OUT","18:00 0202 OUT","23:58 3961 IN"]이면, 

요금표
기본 시간(분)                                        기본 요금(원)                     단위 시간(분)                   단위 요금(원)

120	                                                    0	                            60	                            591


입/출차 기록
시각(시:분)                                                           차량 번호                                             내역

16:00	                                                                3961	                                           입차
16:00	                                                                0202	                                           입차
18:00	                                                                3961	                                           출차
18:00	                                                                0202	                                           출차
23:58	                                                                3961	                                           입차


자동차별 주차 요금
차량 번호                           누적 주차 시간(분)                     주차 요금(원)

0202	                                120	                                    0
3961	                                120 + 1 = 121	                        0 +⌈(121 - 120) / 60⌉x 591 = 591


3961번 차량은 2번째 입차된 후에는 출차된 내역이 없으므로, 23:59에 출차되었다고 간주한다.'''

#4) 코드 설명

'''solution 함수에 fees와 records의 값을 입력 받는다.
요금 계산을 할 때 분을 올림하기 위해 math라는 모듈을 불러온다.
IN된 차량의 입차 시간을 기록하여, OUT 시에 체류 시간을 계산하기 위해  answer_dic이라는 빈 딕셔너리를 생성한다.
차량별로 주차 요금을 계산할 때 필요한 전체 체류 시간을 구하기 위해 total_time_dict이라는 빈 딕셔너리를 생성한다.
반복문을 통해 records의 요소 값들을 하나씩 record에 삽입한다.
반복문 안에서는 time과 car_number, stats에 split 함수를 사용하여 공백을 기준으로 record를 나누어 각각 입차 또는 출차 시간, 차량 번호, 입차 혹은 출차 상태를 저장한다.
map 함수를 이용해 정수 형태로 콜론을 기준으로 나누어 시와 분을 각각 hour과 minute에 저장한다.
만약 car_number이 total_time_dict 딕셔너리에 없다면, 즉 차량 번호가 딕셔너리에 없다면 차량 번호를 딕셔너리에 추가하고 value 값을 0으로 설정한다.
만약 status가 "IN"과 같고 car_numberdl answer_dict에 없다면, 즉 현재 차량의 상태가 입차한 상태이고 차량 번호가 answer_dict 딕셔너리에 없다면 차량 번호를 key로 하고 입차한 시간 중 분을 value로 새로 설정한다.
만약 tatus가 "IN"과 같고 car_numberdl answer_dict에 있다면, 즉 현재 차량의 상태가 입차한 상태이고 차량 번호가 answer_dict 딕셔너리에 있으면, 해당  차량 번호 key의 value를 현재 minutes로 바꾼다.
만약 위에 경우가 아니라면 차량이 출차한 상태이므로 total_time_dict 리스트에 해당 차량 번호의 value 값을 minutes에서 answer_dict 딕셔너리의 해당 차령 번호의 value 값을 뺀 값을 더하여 총 체류 시간을 갱신한다.
그 다음에 answer_dict 딕셔너리의 해당 차령 번호의 values 값을 -1로 변경하여 출차한 상태로 한다.
마지막에 출차 처리 되지 않은 차량이 있는 경우를 대비하여 반복문을 통해 answer_dict 딕셔너리의 모든 key와 values 값을 각각 집어넣는다.
반복문 안에서 만약 in_time이 -1과 다르다면 출차 되지 않은 차량이라는 뜻이므로 23시 59분에 출차 했다고 가정하여 total_time_dic 딕셔너리의 해당 차량 번호의 체류 시간을 23시 59분을 모두 분으로 바꿔주고 그 값에 입차한 시간 중 분의 값을 빼서 체류 시간을 변경한다.
결과를 출력하기 위해 result라는 빈 리스트를 생성한다.
반복문을 통해 sorted 함수를 통해 total_time_dict의 차량 번호들을 순서대로 정렬해서 하나씩 car_number에 집어넣는다.
반복문 안에서는 total_time에 total_time_dict 딕셔너리에 해당 차량 번호의 value 값을 가져와 체류 시간을 저장한다.
그 후 만약 total_time이 fees의 첫 번째 요소 값보다 작거나 같다면, 즉 체류 시간이 기본 시간보다 작거나 같다면 parking_fee에 fees의 두 번째 요소 값을 가져와 기본 요금으로 저장한다.
만약 그렇지 않다면 parking_fee에 기본 요금과 체류 시간 빼기 기본 시간을 한 값에 단위 시간으로 나누고 올림을 한 다음 단위 시간당 요금을 곱해서 요금을 저장한다.
그 값을 result에 저장한다.
모든 동작이 끝나면 result 값을 반환한다.'''

#문제 출처 : 프로그래머스

