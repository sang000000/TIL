def solution(s):
    answer = ''
    s = s.split(" ")
    for i in range(len(s)):
        if s[i] != "" and s[i][0].isdigit() != True:
            s[i] = s[i][0].upper() + s[i][1:].lower()
        elif s[i] != "" and s[i][0].isdigit() != False:
            s[i] = s[i][0] + s[i][1:].lower()
    answer = " ".join(s)
    return answer


#1) 문제 설명

'''JadenCase란 모든 단어의 첫 문자가 대문자이고, 그 외의 알파벳은 소문자인 문자열이다. 단, 첫 문자가 알파벳이 아닐 때에는 이어지는 알파벳은 소문자로 쓰면 된다. (첫 번째 입출력 예 참고)
문자열 s가 주어졌을 때, s를 JadenCase로 바꾼 문자열을 반환하는 함수, solution을 완성해라.'''


#2) 제한 사항

'''s는 길이 1 이상 200 이하인 문자열입니다.
s는 알파벳과 숫자, 공백문자(" ")로 이루어져 있습니다.
숫자는 단어의 첫 문자로만 나옵니다.
숫자로만 이루어진 단어는 없습니다.
공백문자가 연속해서 나올 수 있습니다.'''


#3) 입출력 예시 



'''입출력 예 #1



s가 "3people unFollowed me"이면, "3people Unfollowed Me"를 반환한다.



입출력 예 #1



s가 "for the last week"이면, "For The Last Week"를 반환한다.'''

#4) 코드 설명

'''solution 함수에서 s의 값을 입력 받는다.
answer을 빈 리스트로 초기화한다.
입력 받은 문자열 s를 split를 이용하여 공백을 기준으로 나눠서 s에 다시 저장한다. 구분자를 " " 이렇게 하면 공백이 연속으로 나와도 하나만 구분자로 사용하고 나머지 공백은 다른 문자처럼 나눠진다.
반복문을 통해 0부터 s의 길이 빼기 1까지 i에 값을 하나씩 넣어준다.
반복문 안에서는 만약 s[i]가 공백이 아니고 s[i]의 첫번째 위치에 글자가 숫자가 아니라면, s[i]의 값을 s[i]의 첫 글자는 upper 함수를 사용하여 대문자로 바꿔주고 s[i]의 나머지 글자는 lower 함수를 사용하여 소문자로 바꿔 더한 값으로 다시 저장해준다.
만약 s[i]가 공백이 아니고 s[i]의 첫번째 위치에 글자가 숫자라면, s[i]의 첫 글자 더하기 s[i]의 나머지 글자를 lower 함수를 이용해 소문자로 변환 해준 값으로 바꾼다.
반복문이 끝나면 join 함수를 사용하여 리스트 s를 각 요소 사이에 공백을 추가하여 문자열로 바꾼다.
그 후 answer을 반환한다. '''

#문제 출처 : 프로그래머스