def solution(ingredient):
    answer = 0
    stack = []

    for ing in ingredient:
        stack.append(ing)
        if len(stack) >= 4 and stack[-4:] == [1, 2, 3, 1]:
            answer += 1
            del stack[-4:]

    return answer


# 1) 문제 설명

"""햄버거 가게에서 일을 하는 상수는 햄버거를 포장하는 일을 한다. 함께 일을 하는 다른 직원들이 햄버거에 들어갈 재료를 조리해 주면 조리된 순서대로 상수의 앞에 아래서부터 위로 쌓이게 되고, 상수는 순서에 맞게 쌓여서 완성된 햄버거를 따로 옮겨 포장을 하게 된다. 상수가 일하는 가게는 정해진 순서(아래서부터, 빵 – 야채 – 고기 - 빵)로 쌓인 햄버거만 포장을 한다. 상수는 손이 굉장히 빠르기 때문에 상수가 포장하는 동안 속 재료가 추가적으로 들어오는 일은 없으며, 재료의 높이는 무시하여 재료가 높이 쌓여서 일이 힘들어지는 경우는 없다.
예를 들어, 상수의 앞에 쌓이는 재료의 순서가 [야채, 빵, 빵, 야채, 고기, 빵, 야채, 고기, 빵]일 때, 상수는 여섯 번째 재료가 쌓였을 때, 세 번째 재료부터 여섯 번째 재료를 이용하여 햄버거를 포장하고, 아홉 번째 재료가 쌓였을 때, 두 번째 재료와 일곱 번째 재료부터 아홉 번째 재료를 이용하여 햄버거를 포장한다. 즉, 2개의 햄버거를 포장하게 된다.
상수에게 전해지는 재료의 정보를 나타내는 정수 배열 ingredient가 주어졌을 때, 상수가 포장하는 햄버거의 개수를 return 하도록 solution 함수를 완성하라.
"""
# 2) 제한 사항

"""1 ≤ keymap의 길이 ≤ 100
1 ≤ ingredient의 길이 ≤ 1,000,000
ingredient의 원소는 1, 2, 3 중 하나의 값이며, 순서대로 빵, 야채, 고기를 의미한다."""

# 3) 입출력 예시

"""입출력 예 #1

ingredient가 [2, 1, 1, 2, 3, 1, 2, 3, 1] 이면, 2를 반환한다.
입출력 예 #2

ingredient가 [1, 3, 2, 1, 2, 1, 3, 1, 2]이면, 상수가 포장할 수 있는 햄버거가 없으므로 0을 반환한다."""

# 4) 코드 설명

"""solution 함수에서ingredient의 값을 입력 받는다.
만들 수 있는 햄버거의 개숫를 세기 위해 answer은 초기 값을 0으로 설정한다.
햄버거를 쌓기 위해 stack이라는 빈 리스트를 만든다.
반복문을 통해 ingredient의 요소 값을 하나씩 ing에 집어넣는다.
반복문 안에서 해당 ing 값을 stack에 추가한다.
만약 stack의 길이가 4와 같거나 4보다 크고 stack에 맨 뒤부터 그 앞에 3개를 포함한 값이 [1,2,3,1]이라면 햄버거가 만들어진 것이므로 answer 값을 1 추가하고 stack에서 그 값을 삭제한다.
반복문이 끝나면 answer 값을 반환한다."""

# 문제 출처 : 프로그래머스
